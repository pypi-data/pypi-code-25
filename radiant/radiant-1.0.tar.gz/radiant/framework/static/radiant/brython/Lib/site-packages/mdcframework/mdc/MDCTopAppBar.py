from .core import MDCTemplate
#from .MDCButton import MDCButton,  MDCIconToggle




########################################################################
class __topAppBarItem__(MDCTemplate):
    """"""

    #----------------------------------------------------------------------
    def __new__(self, icon, href="#", **kwargs):
        """"""
        self.element = self.render(locals(), kwargs)
        return self.element


    #----------------------------------------------------------------------
    @classmethod
    def __html__(cls, **context):
        """"""
        code = """
            <a href="{href}" class="material-icons mdc-top-app-bar__action-item">{icon}</a>
        """
        return cls.render_html(code, context)





########################################################################
class MDCTopAppBar(MDCTemplate):
    """"""

    NAME = 'topAppBar', 'MDCTopAppBar'

    CSS_classes = {

        #'_16_9': 'mdc-card__media--16-9',
        #'square': 'mdc-card__media--square',
    }

    MDC_optionals = {

        #'outlined': 'mdc-card--outlined',
        #'full_bleed': 'mdc-card__actions--full-bleed',
        #'icon': '<i class="material-icons mdc-button__icon" aria-hidden="true">{icon}</i>',
        #'disabled': 'disabled',

        'short': 'mdc-top-app-bar--short mdc-top-app-bar--short-has-action-item',
        'collapsed': 'mdc-top-app-bar--short-collapsed',
        'fixed': 'mdc-top-app-bar--fixed',
        'prominent': 'mdc-top-app-bar--prominent'

    }


    #----------------------------------------------------------------------
    def __new__(self, title, menu_icon='menu', short=False, collapsed=False, prominent=False, fixed=False, **kwargs):
        """"""
        self.element = self.render(locals(), kwargs)


        #self.element.bind('MDCTopAppBar:nav', lambda ev:print('hdhd'))


        return self.element



    #----------------------------------------------------------------------
    @classmethod
    def __html__(cls, **context):
        """"""

        code = """
            <header class="mdc-top-app-bar {short} {collapsed} {fixed} {prominent}" style='z-index: 1;'>
              <div class="mdc-top-app-bar__row">
                <section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-start">
                  <a href="#" class="material-icons mdc-top-app-bar__navigation-icon">{menu_icon}</a>
                  <span class="mdc-top-app-bar__title">{title}</span>
                </section>
                <section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-end" role="toolbar">
                </section>
              </div>
            </header>
        """




        return cls.render_html(code, context)




    #----------------------------------------------------------------------
    @classmethod
    def __getitem__(self, name):
        """"""
        if name is 'actions':
            return self.element.select('.mdc-card__actions')[0]

        elif name is 'icons_parent':
            return self.element.select('.mdc-top-app-bar__section--align-end')[0]

        elif name is 'icon':
            return self.element.select('.mdc-top-app-bar__navigation-icon')[0]

        elif name is 'title':
            return self.element.select('.mdc-top-app-bar__title')[0]



    #----------------------------------------------------------------------
    @classmethod
    def add_item(cls, *args, **kwargs):
        """"""

        item = __topAppBarItem__(*args, **kwargs)
        #print(cls['icons_parent'])
        cls['icons_parent'] <= item

        return item






    #----------------------------------------------------------------------
    @classmethod
    def title(self, mdc, text):
        """"""
        self['title'].text = text

