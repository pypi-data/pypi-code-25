from .core import MDCTemplate

########################################################################
class MDCToolbar(MDCTemplate):
    """"""

    NAME = 'toolbar', 'MDCToolbar'

    CSS_classes = {
        'fixed':  'mdc-toolbar--fixed',
        'waterfall': 'mdc-toolbar--waterfall',
        'flexible': 'mdc-toolbar--flexible',
        'fixed_lastrow_only': 'mdc-toolbar--fixed-lastrow-only',
    }

    #----------------------------------------------------------------------
    def __new__(self, title, menu_icon='menu', **kwargs):
        """"""
        self.element = self.render(locals(), kwargs)
        return self.element

        #return super(MDCDrawer, self).__new__(locals())



    #----------------------------------------------------------------------
    @classmethod
    def __html__(cls, **context):
        """"""
        code = """
        <header class="mdc-toolbar {CSS_classes}">
          <div class="mdc-toolbar__row">
            <section class="mdc-toolbar__section mdc-toolbar__section--align-start">
              <a href="#" class="material-icons mdc-toolbar__menu-icon">{menu_icon}</a>
              <span class="mdc-toolbar__title">{title}</span>
            </section>
          </div>
        </header>
        """

        return cls.render_html(code, context)




    #----------------------------------------------------------------------
    @classmethod
    def __getitem__(self, name):
        """"""
        if name is 'icon':
            return self.element.select('.mdc-toolbar__menu-icon')[0]

        elif name is 'title':
            return self.element.select('.mdc-toolbar__title')[0]




    #----------------------------------------------------------------------
    @classmethod
    def title(self, mdc, text):
        """"""
        self['title'].text = text


