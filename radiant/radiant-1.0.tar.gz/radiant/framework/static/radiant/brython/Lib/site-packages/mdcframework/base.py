from browser import document, window, html

import framework
from .mdc.MDCDrawer import MDCDrawer

#from .core import MDC

# from functools import wraps
# from importlib import import_module



########################################################################
class MDCBase:
    """"""

    #----------------------------------------------------------------------
    def __init__(self, *args, **kwargs):
        """"""

        self.views = {}
        self.register_class = kwargs
        #self.
        self.build()

    #----------------------------------------------------------------------
    def generate_drawer(self):
        """"""
        self.drawer =  MDCDrawer(temporary=True)

        for key in self.register_class:
            # print(key)
            _, name, icon = self.register_class[key]
            item = self.drawer.mdc.add_item(name, icon)
            item.bind('click', self.__set_view__(key, item))

        self.drawer.mdc['items'][0].class_name += ' mdc-list-item--activated'

        document <= self.drawer

        [item.bind('click', self.__set_focus__) for item in document.select('.mdc-list-item')]


    #----------------------------------------------------------------------
    def __set_view__(self, key, item):
        """"""
        def inset(evt): self.view(key)
        return inset


    #----------------------------------------------------------------------
    def __set_focus__(self, element):
        """"""
        for item in document.select('.mdc-list-item'):
            item.class_name = item.class_name.replace('mdc-list-item--activated', '')
        element.target.class_name += ' mdc-list-item--activated'


    #----------------------------------------------------------------------
    @classmethod
    def load_styles(self, styles_list):
        """"""
        document.select('head')[0] <= [html.LINK(href=framework.static(style), type='text/css', rel='stylesheet') for style in styles_list]


    #----------------------------------------------------------------------
    @classmethod
    def load_scripts(self, styles_list):
        """"""
        document.select('head')[0] <= [html.SCRIPT(src=framework.static(style), type='text/javascript') for style in styles_list]


    #----------------------------------------------------------------------
    def build(self):
        """"""
        #self.container = html.DIV(Class="main-containder", style={"padding-top": "56px", })
        #document <= self.container
        self.container = html.DIV()
        document <= self.container


    # #----------------------------------------------------------------------
    # def register(self, class_, icon, name):
        # """"""
        # self.register_class[name] = (class_, icon)



    #----------------------------------------------------------------------
    def view(self, name):
        """"""
        #print(name)
        if name in self.views:
            self.container.clear()
            self.container <= self.views[name].container

        else:
            #view = eval(name)
            view, _, _ = self.register_class[name]
            mod, class_ = view.split('.')
            mod = __import__(mod)
            view = getattr(mod, class_)
            view = view(self)
            self.container.clear()
            self.container <= view.container
            self.views[name] = view

        self.secure_load()
        self.secure_styles()


    #----------------------------------------------------------------------
    def secure_load(self):
        """"""
        try:
            topappbar = window.mdc.topAppBar.MDCTopAppBar.attachTo(document.querySelector('.mdc-top-app-bar'))
            if hasattr(self, 'drawer'):
                document.select('.mdc-top-app-bar')[0].bind('MDCTopAppBar:nav', lambda ev:self.drawer.mdc.open())
        except:
            pass

        # window.mdc.slider.MDCSlider.attachTo(document.querySelector('.mdc-slider'))
        try:
            [window.mdc.slider.MDCSlider.attachTo(slider) for slider in document.select('.mdc-slider')]
        except:
            pass

        # try:
            # [window.mdc.floatingLabel.MDCFloatingLabel.attachTo(label) for label in document.select('.mdc-floating-label')]
        # except:
            # pass
        # try:
            # [window.mdc.helperText.MDCTextFieldHelperText.attachTo(label) for label in document.select('.mdc-text-field-helper-text')]
        # except:
            # pass

        # try:
            # [window.mdc.lineRipple.MDCLineRipple.attachTo(label) for label in document.select('.mdc-line-ripple')]
        # except:
            # pass

        # try:
            # [window.mdc.textField.MDCTextField.attachTo(label) for label in document.select('.mdc-text-field')]
        # except:
            # pass





        if hasattr(self, 'drawer'):
            self.drawer.mdc.close()


    #----------------------------------------------------------------------
    def secure_styles(self):
        """"""

        document <= html.STYLE('.mdc-text-field__input {height: unset;}')








########################################################################
class MDCView:
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""

        self.main = parent

        #self.main.mdc_drawer.mdc.close()
        self.main.container.clear()

        self.container = self.build()
        #self.connect()



    #----------------------------------------------------------------------
    def toggleclass(self, chip, class_):
        """"""
        if class_ in chip.class_name:
            chip.class_name = chip.class_name.replace(class_, '')
        else:
            chip.class_name += ' {}'.format(class_)



    #----------------------------------------------------------------------
    @classmethod
    def subview(cls, view):
        """"""
        from functools import wraps

        @wraps(view)
        def wrapped(self, *args, **kwargs):
            """"""
            container = view(self)

            self.container.clear()
            self.container <= container

            self.main.secure_load()

            #self.main.container.clear()
            #self.container.clear()
        return wrapped




#########################################################################
#class htmlElement:
    #""""""

    ##----------------------------------------------------------------------
    #def __new__(self, element):
        #""""""
        #element.__getattr__ = self.__getattr__
        #return element


    ##----------------------------------------------------------------------
    #def __getattr__(self, attr):
        #""""""
        #name = self.getAttribute('mdc-name')

        #if attr is 'mdc':
            #return MDC.__mdc__(name, element=self)

        #elif attr is 'Foundation':
            #return MDC.__mdc__(name, element=self).mdc.foundation_


